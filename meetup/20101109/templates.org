* Summary 

See rmuphy's discussion.

+ Separate rendering from the data 

+ Allow for reuse 

+ Minimize mixing JavaScript with HTML

+ Treat big and small views differently 

+ Allow for design to use templates

* Review 

Site comparison.  Limited adoption though this could be confirmed with the 1000 beacon.

** Concatenation 

http://jsfiddle.net/jwalsh/dvUBx/3/

** XHR 

Just pull all of the content from the server.

Requires duplicated work. 

** Mustache 

http://cloud01.ci04.sea1.cmates.com:15000/rec/static/demo/index.html


http://github.com/janl/mustache.js.git

Recommended by 

http://wiki.apache.org/couchdb/Generating%20HTML%20from%20Javascript%20shows%20and%20lists

Notes available in 

http://net.tutsplus.com/tutorials/javascript-ajax/quick-tip-using-the-mustache-template-library/

** $.tmpl() 

Client based.  Available on the server as 

http://github.com/kof/node-jqtpl


Client side interactivity. 

* Implementation 

** Run through each of the examples 

* Risks / evaluation factors 

** When to use server rendering 

Use the template only for the single time rendering 

** Performance: compilation of templates is expensive 

Would need to be cached. 

** Templates not readable 

** No tools for segmenting functionality 

** Templates will proliferate 

** Performance:  Caching needed for templates 

** Performance:  Delivery of excessive templates 

** Dependency management: Cannot determine which templates are reviewed for a view 

** RequiresJS 

** DRY

** Maintainability 

Could become fragmented; no obvious reuse. 
** Where to serve

** How to cache 

** How to avoid duplication
** <noscript> ? 

** Templates and progressive enhancement 
 
http://github.com/ry/node/wiki/modules

* Notes

http://benv.ca/2010/1/24/5-tips-for-better-javascript-applications/
